void main(
	float4 out Color : COLOR,
	float2 in v_TexCoord : TEXCOORD0,
	float4 in w_Vertex : TEXCOORD2,
	
	uniform float4 MatColor,
	uniform int lights,
	uniform float3 lightPositions[18],
	uniform float3 lightColors[18],
	uniform float lightIntensities[18],
	
	uniform float3 ambientLightColor,
	uniform float ambientLightIntensity,
	uniform float3 skyColor,
	uniform bool textured,
	uniform sampler2D Texture0 : TEXUNIT0
) {
	float4 t_Color;
	
	float3 FOG_COLOR = skyColor;
	float RENDER_DISTANCE = 80;
	
	float4 color = float4(1,1,1,1);
	if(textured) {
		t_Color = tex2D(Texture0, v_TexCoord);
		color = t_Color * MatColor;
	} else {
		color = MatColor;
	}
	
	
	/*color = color * (float4(1,1,1, 1) * ambientLightIntensity);
	float cdistance = distance(w_Vertex.xyz, float3(0, 0, 0));
	
	if(cdistance < RENDER_DISTANCE) {
		for(int i = 0; i < lights; i++) {
			float3 lightPosition = lightPositions[i];
			float3 lightColor = lightColors[i];
			float lightIntensity = lightIntensities[i] * 4;
			float4 lColor = float4(lightColor, 1);
			
			float4 lcPos = float4(lightPosition, 1.0);
			
			float dist = distance(lcPos.xyz, w_Vertex.xyz);
			if(dist < lightIntensity*1.4) {
				float att = 2 / pow((dist/lightIntensity)+1, 2);
				if(att > 0.25) {
					if(att >= 0.99) {
						att = 1;
					} else if(att >= 0.75) {
						att = 0.75;
					} else if(att >= 0.5) {
						att = 0.5;
					} else if(att >= 0.25) {
						att = 0.25;
					} else {
						att = 0;
					}
					
					lColor = (lColor / 1.5) + (MatColor / 3);
					
					lColor *= att;
			        color += lColor;
		        }
	        }
		}
		
		
		float power = pow(cdistance,5)/1000000000.0;
		float4 randomColor = float4(ambientLightColor,1) * power;

		color += randomColor;
	} else {
		color = float4(FOG_COLOR, 1);
	}*/
	
	if(!textured) {
		color.a = MatColor.a;
	} else {
		color.a = t_Color.a * MatColor.a;
	}
	
	Color = color;
}